{{~binOps = ["Contains","Or","And","StartsWith","EndsWith"] ; compEnum = ["is",">",">=","<","<="]~}}
{{~ func render 
    if $0 | object.typeof == "object"
        for $x in $0
            if binOps | array.contains $x.key 
                render $x.value?.Left 
                " "
                $x.key 
                " "
                render $x.value?.Right
            end
            if $x.key == "Not"
                "not (" 
                render $x.value?.Expression 
                ")"
            end
            if $x.key == "Aggregation"
                render $x.value?.Expression 
            end
            if $x.key == "In"
                for exp in $x.value.Expressions
                    render exp; " is "
                end
                for val in $x.value.Values
                   val[0].Literal.Value
                   if !for.last
                        " or "
                    end 
                end
                for query in $x.value.Table
                    query.value.Source 
                end
            end
            if $x.key == "Comparison"
                render $x.value.Left
                " "
                "compEnum[{{$x.value.ComparisonKind}}]" | object.eval_template | object.eval 
                " "
                render $x.value.Right
            end
            if $x.key == "Column"
                $x.value?.Property 
            end
            if $x.key == "Literal"
                $x.value?.Value
            end
        end
    end
end~}}
{{ func filter_visit 
"filt  = {{$0}}" | object.eval_template | object.eval 
    for exp in  filt
        for from in exp?.filter?.From 
            if from?.Entity
                "`"
                from?.Entity
                "`<br>"
                where = exp?.filter?.Where | array.first ; cond = where?.Condition 
                render cond
                "<br>"
            end
        end
    end
end~}}
## Report\Layout
{{for s in sections
"### `Page:` "
    s.displayName
"\r\n"
"`Order:` "
    s.ordinal
" `Width:` "
    s.width
" `Height:` "
    s.height
" `Visible:` "
    s.displayOption
    if s.filters != "[]" && s.filters
        "<br>\r\n**Filter:**<br>\r\n"
        filter_visit s.filters
    end
"\r\n### "
    s.displayName
"-Visuals"
    for viz in s.visualContainers
"\r\n#### `Page:` "
        s.displayName
        " `Visual:` "
        "conf  = {{viz.config}}" | object.eval_template | object.eval 
        conf?.singleVisual?.visualType ?? "Group:" + conf?.singleVisualGroup?.displayName
        title = conf?.singleVisual?.vcObjects?.title | array.first 
        if title?.properties?.text?.expr?.Literal?.Value
"\r\n"
            title?.properties?.text?.expr?.Literal?.Value
"<br>"
        end
"\r\n`X:` "
        (object.typeof viz.x == "string" ? (viz.x | string.to_double) : viz.x )| math.floor
" `Y:` "
        (object.typeof viz.y == "string" ? (viz.y | string.to_double) : viz.y )| math.floor
" `Z:` "
        (object.typeof viz.z == "string" ? (viz.z | string.to_double) : viz.z )| math.floor
" `Width:` "
        (object.typeof viz.width == "string" ? (viz.width | string.to_double) : viz.width) | math.floor
" `Height:` "
        (object.typeof viz.height == "string" ? (viz.height | string.to_double) : viz.height)| math.floor
        if conf?.singleVisual?.projections
"<br>\r\n**Fields:**<br>\r\n"
            for $kp in conf.singleVisual.projections
                " `"
                $kp.key
                ":` "
                $kp.value| array.map "queryRef"

            end
        end
        if viz?.filters != "[]" && viz.filters
"<br>\r\n**Filter**:<br>\r\n"
            filter_visit viz.filters
        end 
"\r\n"
    end
"\r\n---\r\n"
end}}