# recursion
{{binOps = ["Contains","Or","And"]}}
{{uniOps = ["Not","Aggregation"]}}
{{compEnum = ["is",">",">=","<","<="]}}
{{~ func render ~}}
    {{~if $0 | object.typeof == "object"~}}
        {{~for $x in $0~}}
            {{~if binOps | array.contains $x.key ~}}
                {{~render $x.value?.Left}} {{$x.key | string.downcase }} {{render $x.value?.Right~}}
            {{~end~}}
            {{~if $x.key == "Not"~}}
                {{~"not ("}} {{render $x.value?.Expression~}} {{")"~}}
            {{~end~}}
            {{~if $x.key == "Aggregation"~}}
                {{~render $x.value?.Expression~}} 
            {{~end~}}
            {{~if $x.key == "In"~}}
                {{~for exp in $x.value.Expressions~}}
                    {{~render exp~}} {{" is "~}}
                {{~end~}}
                {{~for val in $x.value.Values~}}
                    {{~val[0].Literal.Value~}} 
                {{~end~}}
            {{~end~}}
            {{~if $x.key == "Comparison"~}}
                {{~render $x.value.Left}} {{"compEnum[{{$x.value.ComparisonKind}}]"|object.eval_template|object.eval}} {{render $x.value.Right~}}
            {{~end~}}
            {{~if $x.key == "Column"~}}
                {{~$x.value?.Property ~}}
            {{~end~}}
            {{~if $x.key == "Literal"~}}
                {{~$x.value?.Value ~}}
            {{~end~}}
        {{~end~}}
    {{~end~}}
{{~ end ~}}

{{ "filt  = {{model.sections[0].visualContainers[2].filters}}" | object.eval_template | object.eval ; filt}}
{{for exp in  filt }}
{{from = exp?.filter?.From | array.first}} 
{{from?.Entity}}
{{where = exp?.filter?.Where | array.first }}
{{cc = where?.Condition; cc}}
{{render cc }}
{{end}}